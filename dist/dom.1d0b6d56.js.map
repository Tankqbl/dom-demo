{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","console","log","nextSibling","parentNode","insertBefore","before","innerBefore","append","parent","appendChild","wrap","remove","removeChild","empty","childNodes","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"AAAAA,MAAM,CAACC,GAAP,GAAa;AACTC,EAAAA,MADS,kBACFC,MADE,EACM;AACX,QAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAlB,CADW,CACyC;;AACpDF,IAAAA,SAAS,CAACG,SAAV,GAAsBJ,MAAM,CAACK,IAAP,EAAtB,CAFW,CAEwB;;AACnC,WAAOJ,SAAS,CAACK,OAAV,CAAkBC,UAAzB,CAHW,CAGwB;AACtC,GALQ;AAMTC,EAAAA,KANS,iBAMHC,IANG,EAMGC,KANH,EAMU;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,WAAjB,EADe,CACc;;AAC7BJ,IAAAA,IAAI,CAACK,UAAL,CAAgBC,YAAhB,CAA6BL,KAA7B,EAAoCD,IAAI,CAACI,WAAzC;AACH,GATQ;AAWTG,EAAAA,MAXS,kBAWFP,IAXE,EAWIC,KAXJ,EAWW;AAChBD,IAAAA,IAAI,CAACK,UAAL,CAAgBG,WAAhB,CAA4BP,KAA5B,EAAmCD,IAAnC;AACH,GAbQ;AAcTS,EAAAA,MAdS,oBAcA;AACLC,IAAAA,MAAM,CAACC,WAAP,CAAmBX,IAAnB;AACH,GAhBQ;AAgBP;AACFY,EAAAA,IAjBS,gBAiBJZ,IAjBI,EAiBEU,MAjBF,EAiBU;AACfrB,IAAAA,GAAG,CAACkB,MAAJ,CAAWP,IAAX,EAAiBU,MAAjB;AACArB,IAAAA,GAAG,CAACoB,MAAJ,CAAWC,MAAX,EAAmBV,IAAnB,EAFe,CAES;AAC3B,GApBQ;AAqBTa,EAAAA,MArBS,kBAqBFb,IArBE,EAqBI;AACTA,IAAAA,IAAI,CAACK,UAAL,CAAgBS,WAAhB,CAA4Bd,IAA5B;AACA,WAAOA,IAAP;AACH,GAxBQ;AAyBTe,EAAAA,KAzBS,iBAyBHf,IAzBG,EAyBG;AAAA,QACAgB,UADA,GACehB,IADf,CACAgB,UADA;AAER,QAAMC,KAAK,GAAG,EAAd;AACA,QAAIC,CAAC,GAAGlB,IAAI,CAACF,UAAb;;AACA,WAAOoB,CAAP,EAAU;AACND,MAAAA,KAAK,CAACE,IAAN,CAAW9B,GAAG,CAACwB,MAAJ,CAAWb,IAAI,CAACF,UAAhB,CAAX;AACAoB,MAAAA,CAAC,GAAGlB,IAAI,CAACF,UAAT,CAFM,CAEa;AACtB;;AACD,WAAOmB,KAAP;AACH,GAlCQ;AAmCTG,EAAAA,IAnCS,gBAmCJpB,IAnCI,EAmCEqB,IAnCF,EAmCQC,KAnCR,EAmCe;AAAC;AACrB,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxBxB,MAAAA,IAAI,CAACyB,YAAL,CAAkBJ,IAAlB,EAAwBC,KAAxB;AACH,KAFD,MAGK,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC7B,aAAOxB,IAAI,CAAC0B,YAAL,CAAkBL,IAAlB,CAAP;AACH;AACJ,GA1CQ;AA2CTM,EAAAA,IA3CS,gBA2CJ3B,IA3CI,EA2CET,MA3CF,EA2CU;AAAC;AAChB,QAAIgC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxB,UAAI,eAAexB,IAAnB,EAAyB;AAAEA,QAAAA,IAAI,CAACL,SAAL,GAAiBJ,MAAjB;AAAyB,OAApD,CAAoD;AAApD,WACK;AAAES,UAAAA,IAAI,CAAC4B,WAAL,GAAmBrC,MAAnB;AAA2B;AACrC,KAHD,CAGC;AAHD,SAIK,IAAIgC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC7B,YAAI,eAAexB,IAAnB,EAAyB;AACrB,iBAAOA,IAAI,CAACL,SAAZ;AACH,SAFD,CAEC;AAFD,aAGK;AAAE,mBAAOK,IAAI,CAAC4B,WAAZ;AAAyB;AACnC,OAVc,CAUd;;AACJ,GAtDQ;AAsDP;AAEFC,EAAAA,IAxDS,gBAwDJ7B,IAxDI,EAwDET,MAxDF,EAwDU;AACf,QAAIgC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxBxB,MAAAA,IAAI,CAACL,SAAL,GAAiBJ,MAAjB;AACH,KAFD,MAEO,IAAIgC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC/B,aAAOxB,IAAI,CAACL,SAAZ;AACH;AAEJ,GA/DQ;AAgETmC,EAAAA,KAhES,iBAgEH9B,IAhEG,EAgEGqB,IAhEH,EAgESC,KAhET,EAgEgB;AACrB,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAAE;AAC1BxB,MAAAA,IAAI,CAAC8B,KAAL,CAAWT,IAAX,IAAmBC,KAAnB;AACH,KAFD,MAGK,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC7B,UAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAAC;AAC3B,eAAOrB,IAAI,CAAC8B,KAAL,CAAWT,IAAX,CAAP;AACH,OAFD,MAGK,IAAIA,IAAI,YAAYU,MAApB,EAA4B;AAAC;AAC9B,YAAIC,MAAM,GAAGX,IAAb;;AACA,aAAK,IAAIY,GAAT,IAAgBD,MAAhB,EAAwB;AACpBhC,UAAAA,IAAI,CAAC8B,KAAL,CAAWG,GAAX,IAAkBD,MAAM,CAACC,GAAD,CAAxB;AACH;AACJ;AAEJ;AACJ,GAhFQ;AAiFTC,EAAAA,KAAK,EAAE;AACHC,IAAAA,GADG,eACCnC,IADD,EACOoC,SADP,EACkB;AACjBpC,MAAAA,IAAI,CAACqC,SAAL,CAAeF,GAAf,CAAmBC,SAAnB;AACH,KAHE;AAIHvB,IAAAA,MAJG,kBAIIb,IAJJ,EAIUoC,SAJV,EAIqB;AACpBpC,MAAAA,IAAI,CAACqC,SAAL,CAAexB,MAAf,CAAsBuB,SAAtB;AACH,KANE;AAOHE,IAAAA,GAPG,eAOCtC,IAPD,EAOOoC,SAPP,EAOkB;AACjB,aAAOpC,IAAI,CAACqC,SAAL,CAAeE,QAAf,CAAwBH,SAAxB,CAAP;AACH;AATE,GAjFE;AA4FTI,EAAAA,EA5FS,cA4FNxC,IA5FM,EA4FAyC,SA5FA,EA4FWC,EA5FX,EA4Fe;AACpB1C,IAAAA,IAAI,CAAC2C,gBAAL,CAAsBF,SAAtB,EAAiCC,EAAjC;AACH,GA9FQ;AA+FTE,EAAAA,GA/FS,eA+FL5C,IA/FK,EA+FCyC,SA/FD,EA+FYC,EA/FZ,EA+FgB;AACrB1C,IAAAA,IAAI,CAAC6C,mBAAL,CAAyBJ,SAAzB,EAAoCC,EAApC;AACH,GAjGQ;AAkGTI,EAAAA,IAlGS,gBAkGJC,QAlGI,EAkGMC,KAlGN,EAkGa;AAAC;AACnB,WAAO,CAACA,KAAK,IAAIvD,QAAV,EAAoBwD,gBAApB,CAAqCF,QAArC,CAAP,CADkB,CACmC;AACxD,GApGQ;AAqGTrC,EAAAA,MArGS,kBAqGFV,IArGE,EAqGI;AACT,WAAOA,IAAI,CAACU,MAAZ;AACH,GAvGQ;AAwGTwC,EAAAA,QAxGS,oBAwGAlD,IAxGA,EAwGM;AACX,WAAOA,IAAI,CAACkD,QAAZ;AACH,GA1GQ;AA2GTC,EAAAA,QA3GS,oBA2GAnD,IA3GA,EA2GM;AACX,WAAOoD,KAAK,CAACC,IAAN,CAAWrD,IAAI,CAACK,UAAL,CAAgB6C,QAA3B,EAAoC;AAApC,KACFI,MADE,CACK,UAAAC,CAAC;AAAA,aAAIA,CAAC,KAAKvD,IAAV;AAAA,KADN,CAAP,CADW,CAEiB;AAC/B,GA9GQ;AA+GTwD,EAAAA,IA/GS,gBA+GJxD,IA/GI,EA+GE;AACP,QAAIkB,CAAC,GAAGlB,IAAI,CAACI,WAAb;;AACA,WAAOc,CAAC,IAAIA,CAAC,CAACuC,QAAF,KAAe,CAA3B,EAA8B;AAAC;AAC3BvC,MAAAA,CAAC,GAAGA,CAAC,CAACd,WAAN;AACH;;AACD,WAAOc,CAAP;AACH,GArHQ;AAsHTwC,EAAAA,QAtHS,oBAsHA1D,IAtHA,EAsHM;AACX,QAAIkB,CAAC,GAAGlB,IAAI,CAAC2D,eAAb;;AACA,WAAOzC,CAAC,IAAIA,CAAC,CAACuC,QAAF,KAAe,CAA3B,EAA8B;AAAC;AAC3BvC,MAAAA,CAAC,GAAGA,CAAC,CAACyC,eAAN;AACH;;AACD,WAAOzC,CAAP;AACH,GA5HQ;AA6HT0C,EAAAA,IA7HS,gBA6HJC,QA7HI,EA6HMnB,EA7HN,EA6HU;AACf,SAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACrC,MAA7B,EAAqCsC,CAAC,EAAtC,EAA0C;AACtCpB,MAAAA,EAAE,CAACqB,IAAH,CAAQ,IAAR,EAAcF,QAAQ,CAACC,CAAD,CAAtB;AACH;AACJ,GAjIQ;AAkITE,EAAAA,KAlIS,iBAkIHhE,IAlIG,EAkIG;AACR,QAAMiE,IAAI,GAAG5E,GAAG,CAAC6D,QAAJ,CAAalD,IAAI,CAACK,UAAlB,CAAb;AACA,QAAIyD,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGG,IAAI,CAACzC,MAArB,EAA6BsC,CAAC,EAA9B,EAAkC;AAC9B,UAAIG,IAAI,CAACH,CAAD,CAAJ,KAAY9D,IAAhB,EAAsB;AAClB;AACH;AACJ;;AACD,WAAO8D,CAAP;AACH;AA3IQ,CAAb","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    create(string) {\r\n        const container = document.createElement('template')//template是一个新出的元素，可以包容任何东西\r\n        container.innerHTML = string.trim()//trim() 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR等）。\r\n        return container.content.firstChild//template里面只能这样获取子元素\r\n    },\r\n    after(node, node2) {\r\n        console.log(node.nextSibling)//sibling是兄弟节点\r\n        node.parentNode.insertBefore(node2, node.nextSibling)\r\n    },\r\n\r\n    before(node, node2) {\r\n        node.parentNode.innerBefore(node2, node)\r\n    },\r\n    append() {\r\n        parent.appendChild(node)\r\n    },//加一个儿子\r\n    wrap(node, parent) {\r\n        dom.before(node, parent)\r\n        dom.append(parent, node)//把parent插到node前面,再把node变成parent的儿子 \r\n    },\r\n    remove(node) {\r\n        node.parentNode.removeChild(node)\r\n        return node\r\n    },\r\n    empty(node) {\r\n        const { childNodes } = node\r\n        const array = []\r\n        let x = node.firstChild\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild//大儿子已经死了，现在是剩下的里面的大儿子也就是二儿子\r\n        }\r\n        return array\r\n    },\r\n    attr(node, name, value) {//重载，根据参数不同写不同代码\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        }\r\n        else if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    text(node, string) {//适配，先检测有无此属性,再根据能否使用分别写代码\r\n        if (arguments.length === 2) {\r\n            if ('innerText' in node) { node.innerHTML = string }//ie\r\n            else { node.textContent = string }\r\n        }//chrome可使用\r\n        else if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerHTML\r\n            }//ie\r\n            else { return node.textContent }\r\n        }//chrome可使用\r\n    },//这样改如果div中有p标签等就会也被删掉改掉}\r\n\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML\r\n        }\r\n\r\n    },\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) { // eg:dom.style(div, 'color', 'red')\r\n            node.style[name] = value\r\n        }\r\n        else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {// eg:dom.style(div, 'color')\r\n                return node.style[name]\r\n            }\r\n            else if (name instanceof Object) {// dom.style(div, {color: 'red'})\r\n                let object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        },\r\n    },\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    find(selector, scope) {//scope是范围,在哪里找\r\n        return (scope || document).querySelectorAll(selector)//如果有给定范围就在范围找，否则再全局找\r\n    },\r\n    parent(node) {\r\n        return node.parent\r\n    },\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)//原来不是数组是伪数组，要先变成数组\r\n            .filter(n => n !== node)//过滤\r\n    },\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {//如果x存在且x是文本，nodeType可以再mdn上面查\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {//如果x存在且x是文本，nodeType可以再mdn上面查\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n};\r\n"]}